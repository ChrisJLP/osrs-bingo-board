generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SoloBoard {
  id        String     @id @default(uuid())
  name      String     @unique @db.Citext
  password  String     @db.Text
  title     String?    @db.VarChar(255)
  createdAt DateTime   @default(now())
  rows      Int        @default(5)
  columns   Int        @default(5)
  tiles     SoloTile[]
  playerId  String? // optional foreign key to Player
  player    Player?    @relation(fields: [playerId], references: [id])
}

model SoloTile {
  id           String    @id @default(uuid())
  boardId      String
  board        SoloBoard @relation(fields: [boardId], references: [id], onDelete: Cascade)
  position     Int
  content      String    @db.Text
  imageUrl     String?   @db.VarChar(255)
  target       Int       @default(0) // For non-skill tiles, a completion target; for skill tiles, the goal level
  unit         String    @default("drops")
  progress     Int       @default(0) // For non-skill tiles, progress; for skill tiles, current level
  completed    Boolean   @default(false)
  mode         String? // "skill" when this is a skill tile
  skill        String? // the skill name when mode === "skill"
  currentLevel Int? // alias for progress when in skill mode
  goalLevel    Int? // alias for target when in skill mode
}

model Player {
  id             String      @id @default(uuid())
  username       String      @unique @db.VarChar(255)
  overallLevel   Int
  overallXp      BigInt      @db.BigInt
  attackXp       BigInt      @db.BigInt
  defenceXp      BigInt      @db.BigInt
  strengthXp     BigInt      @db.BigInt
  hitpointsXp    BigInt      @db.BigInt
  rangedXp       BigInt      @db.BigInt
  prayerXp       BigInt      @db.BigInt
  magicXp        BigInt      @db.BigInt
  cookingXp      BigInt      @db.BigInt
  woodcuttingXp  BigInt      @db.BigInt
  fletchingXp    BigInt      @db.BigInt
  fishingXp      BigInt      @db.BigInt
  firemakingXp   BigInt      @db.BigInt
  craftingXp     BigInt      @db.BigInt
  smithingXp     BigInt      @db.BigInt
  miningXp       BigInt      @db.BigInt
  herbloreXp     BigInt      @db.BigInt
  agilityXp      BigInt      @db.BigInt
  thievingXp     BigInt      @db.BigInt
  slayerXp       BigInt      @db.BigInt
  farmingXp      BigInt      @db.BigInt
  runecraftXp    BigInt      @db.BigInt
  hunterXp       BigInt      @db.BigInt
  constructionXp BigInt      @db.BigInt
  createdAt      DateTime    @default(now())
  boards         SoloBoard[] // one-to-many relation: one player can have many boards
}

// model MainBoard {
//   id          String   @id @default(uuid())
//   projectId   String?  @unique
//   name        String   @db.VarChar(100)
//   rows        Int      @default(5) @db.Integer
//   columns     Int      @default(5) @db.Integer
//   password    String?  @db.Text
//   color       String?  @db.VarChar(7)
//   bonusPoints Int      @default(0)
//   createdAt   DateTime @default(now())

//   project   BingoProject? @relation(fields: [projectId], references: [id], onDelete: Cascade)
//   tiles     Tile[]
//   TeamBoard TeamBoard[]
// }

// model Tile {
//   id       String  @id @default(uuid())
//   boardId  String
//   position Int
//   content  String  @db.Text
//   imageUrl String? @db.VarChar(255)
//   target   Int     @default(0)
//   unit     String  @default("drops")
//   color    String? @db.VarChar(7)
//   points   Int     @default(0)

//   board         MainBoard       @relation(fields: [boardId], references: [id], onDelete: Cascade)
//   TeamBoardTile TeamBoardTile[]
//   Contribution  Contribution[]
// }

// model Team {
//   id        String @id @default(uuid())
//   projectId String
//   name      String @db.VarChar(100)

//   project     BingoProject @relation(fields: [projectId], references: [id], onDelete: Cascade)
//   teamMembers TeamMember[]
//   teamBoards  TeamBoard[]
// }

// model TeamMember {
//   id      String  @id @default(uuid())
//   teamId  String
//   boardId String?
//   name    String  @db.VarChar(100)

//   team         Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
//   board        TeamBoard?     @relation(fields: [boardId], references: [id], onDelete: Cascade)
//   Contribution Contribution[]
//   Leaderboard  Leaderboard[]
// }

// model TeamBoard {
//   id                 String  @id @default(uuid())
//   projectId          String
//   teamId             String
//   boardId            String
//   password           String? @db.Text
//   completedRows      Int[]   @default([])
//   completedColumns   Int[]   @default([])
//   completedDiagonals Int[]   @default([])

//   project      BingoProject    @relation(fields: [projectId], references: [id], onDelete: Cascade)
//   team         Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
//   board        MainBoard       @relation(fields: [boardId], references: [id], onDelete: Cascade)
//   tiles        TeamBoardTile[]
//   TeamMember   TeamMember[]
//   Contribution Contribution[]
//   Leaderboard  Leaderboard[]
// }

// model TeamBoardTile {
//   id          String  @id @default(uuid())
//   teamBoardId String
//   tileId      String
//   progress    Int     @default(0)
//   completed   Boolean @default(false)

//   teamBoard TeamBoard @relation(fields: [teamBoardId], references: [id], onDelete: Cascade)
//   tile      Tile      @relation(fields: [tileId], references: [id], onDelete: Cascade)
// }

// model Contribution {
//   id          String @id @default(uuid())
//   teamBoardId String
//   tileId      String
//   memberId    String
//   amount      Int    @default(0)

//   teamBoard TeamBoard  @relation(fields: [teamBoardId], references: [id], onDelete: Cascade)
//   tile      Tile       @relation(fields: [tileId], references: [id], onDelete: Cascade)
//   member    TeamMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
// }

// model Leaderboard {
//   id          String @id @default(uuid())
//   teamBoardId String
//   memberId    String
//   points      Int    @default(0)

//   teamBoard TeamBoard  @relation(fields: [teamBoardId], references: [id], onDelete: Cascade)
//   member    TeamMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
// }
